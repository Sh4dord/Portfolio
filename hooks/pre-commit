#!/usr/bin/env dart

import 'dart:io';

void main(List<String> arguments) async {
  // Do not execute when merging
  final myFile = File('.git/MERGE_HEAD');
  if (await myFile.exists()) {
    exit(0);
  }

  print('Running dart lint...');

  // Get the list of the files in the commit
  ProcessResult result = await Process.run('git', ['diff', '--cached', '--name-only', '--diff-filter=d']);

  // Only keeping dart files in the lib directory
  final fileList = result.stdout.split('\n').where((String el) =>
  el.endsWith('.dart')
      && el.startsWith('lib/')
      && !el.endsWith('.g.dart')
      && !el.endsWith('.freezed.dart')
  );

  // Running the analyze on the modified files
  if (fileList.length > 0) {
    ProcessResult analyseResult = await Process.run('dart', ['analyze', ...fileList.toList()]);
    final infoCount = analyseResult.stdout
        .split('\n')
        .where((String line) => line.trim().startsWith('info'))
        .length;

    print(analyseResult.stdout.split('\n').where((line) => !line.trim().startsWith('info')).join('\n'));
    print('(${infoCount} hidden infos, infos are hidden to improve the readability of the hook)');
    print(analyseResult.stderr);

    if (analyseResult.exitCode == 0) {
      print('Your code is beautiful, you are the best !');
      exit(0);
    } else {
      print('Your commit contain some errors and warnings, please fix them...');
      print('Good luck & See you later :)');
      exit(-2);
    }
  } else {
    print('No file to lint...');
    exit(0);
  }
}